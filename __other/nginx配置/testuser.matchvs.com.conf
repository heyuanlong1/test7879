lua_shared_dict dictIndex 1m;

server {
	listen   80;
	server_name   testuser.matchvs.com user.matchvs.com testuser2.matchvs.com;
	access_log  /var/log/nginx/testuser.matchvs.com.access.log;
	error_log  /var/log/nginx/testuser.matchvs.com.error.log;

	root /data/matchvs.com/user/wc3/;
    index index.html index.htm;

    location /keyword/ {
        proxy_pass   http://127.0.0.1:8080/jfinal/keyword;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

   location /open/gc1/ {
    proxy_pass   http://127.0.0.1:9090/open/gc1/;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
   }




	location = /wc3/weixin_web_login.do {
        default_type 'text/plain';
        charset UTF-8;
        content_by_lua_file /data/matchvs.com/user/wc3/weixin_web_login.lua;
    }

	location = /wc3/weixin_sdk_config.do {
        default_type 'text/plain';
        charset UTF-8;
        content_by_lua_file /data/matchvs.com/user/wc3/weixin_sdk_config.lua;
    }

    location = / {
        deny all;
    }
    
	#location ^~ /wc2/ {
	#	proxy_set_header Host testuser.matchvs.com;
	#	proxy_pass  http://user.matchvs.com:8088/;
	#}

	#location ~* ^/wechat/ {
	#	default_type 'text/plain';
		#proxy_pass  http://open.vszone.cn:8089;
	#	proxy_pass  http://user.matchvs.com:8089;
	#}



    location = /wc3/keywords.do{
        default_type 'text/plain';
        charset UTF-8;
        content_by_lua_file /data/matchvs.com/user/wc3/keywords.lua;

    }
    location = /wc3/getnickname.do{
        default_type 'text/plain';
        charset UTF-8;
        content_by_lua_file /data/matchvs.com/user/wc3/getnickname.lua;

    }



    location = /wc3/regit.do{
        default_type 'text/plain';
		charset UTF-8;
        content_by_lua_file /data/matchvs.com/user/wc3/regit.lua;

    }

    location = /wc3/getuserinfo.do{

    	default_type 'text/plain';
		charset UTF-8;
    	content_by_lua_file /data/matchvs.com/user/wc3/getuserinfo.lua;

    }

    location = /getUserInfoSNS.do{
        default_type 'text/plain';
        charset UTF-8;
        content_by_lua_file /data/matchvs.com/user/wc3/getUserInfoSNS.lua;
    }


    location = /wc3/getUserInfoX.do{
	default_type 'text/plain';
 	charset UTF-8;
	content_by_lua_file /data/matchvs.com/user/wc3/getUserInfoX.lua;

    }

    location = /wc3/changeuserinfo.do{

        default_type 'text/plain';
        charset UTF-8;
        content_by_lua_file /data/matchvs.com/user/wc3/changeuserinfo.lua;

    }

    location /wc3/login.do{
            default_type 'text/plain';
            content_by_lua_file /data/matchvs.com/user/wc3/login.lua;
    }
    location /wc3/ubind.do{
            default_type 'text/plain';
            content_by_lua_file /data/matchvs.com/user/wc3/ubind.lua;
    }

    location /wc3/fastubind.do{
            default_type 'text/plain';
            charset UTF-8;
            content_by_lua_file /data/matchvs.com/user/wc3/fastubind.lua;
    }

    location /wc3/ulogin.do{
            default_type 'text/plain';
            content_by_lua_file /data/matchvs.com/user/wc3/ulogin.lua;
    }

    location /wc3/wx302.do{
            rewrite ^/ https://open.weixin.qq.com/connect/qrconnect;
    }

    location /wc3/uloginback.do{
            charset UTF-8;
            default_type 'text/html';
            content_by_lua_file /data/matchvs.com/user/wc3/uloginback.lua;
            resolver 180.76.76.76 119.29.29.29 114.215.126.16;
    }
    location /wc3/ubindback.do{
            default_type 'text/html';
            charset UTF-8;
            content_by_lua_file /data/matchvs.com/user/wc3/ubindback.lua;
            resolver 180.76.76.76 119.29.29.29 114.215.126.16;
    }
    location /wc3/baidubind.do{
            default_type 'text/html';
            charset UTF-8;
            content_by_lua_file /data/matchvs.com/user/wc3/baidu_oauth_bind.lua;
    }
    location /wc3/baiduinfo.do{
            default_type 'text/html';
            charset UTF-8;
            content_by_lua_file /data/matchvs.com/user/wc3/baidu_oauth.lua;
    }
    location /wc3/userTokenCheck.do {
            default_type 'text/html';
            charset UTF-8;
            access_by_lua_file /data/matchvs.com/user/wc3/user_auth_check.lua;
            content_by_lua_file /data/matchvs.com/user/wc3/usertokencheck.lua;
    }
    location /wc3/backUserTokenCheck.do {
            default_type 'text/html';
            charset UTF-8;
            access_by_lua_file /data/matchvs.com/user/wc3/user_auth_check.lua;
            content_by_lua '
                local kolib = require "common.kolib"
                local json  = require "common.json"
                local errcode = require "common.errcode"
                local callback = ngx.var.arg_callback or ngx.null
                local response = {}
                local respJson
                response["status"]  = errcode.status_ok
                response["code"]    = errcode.status_ok
                response["msg"]     = "success"
                response["data"]    = data
                respJson            = json:encode(response)
                kolib.saygoodbye(callback, respJson)
            ';
    }
    location /wc3/user_login_log.do{
            default_type 'text/plain';
            content_by_lua_file /data/matchvs.com/user/wc3/user_login_log.lua;
    }
    location /wc3/third_oauth_bind.do{
            resolver 180.76.76.76 119.29.29.29 114.215.126.16;        
            default_type 'text/plain';
            content_by_lua_file /data/matchvs.com/user/wc3/third_oauth_bind.lua;
            error_log  /var/log/nginx/bind.user.matchvs.com.error.log;
    }

    location = /wc3/getbattleuserinfo.do{

        default_type 'text/plain';
                charset UTF-8;
        content_by_lua_file /data/matchvs.com/user/wc3/getbattleuserinfo.lua;

    }




    location = /wc6/changeNickName{
          default_type 'text/plain';
          charset UTF-8;
          content_by_lua_file /data/matchvs.com/user/wc6/matchvs.user.changeNickName.lua;

    }
     location = /wc6/uploadAvatar{
           default_type 'text/plain';
           charset UTF-8;
           content_by_lua_file /data/matchvs.com/user/wc6/matchvs.user.uploadAvatar.lua;
 
     }

     location = /wc6/changeAvatar{
           default_type 'text/plain';
           charset UTF-8;
           content_by_lua_file /data/matchvs.com/user/wc6/matchvs.user.changeAvatar.lua;
 
     }

     location = /wc6/getAvatar{
           default_type 'text/plain';
           charset UTF-8;
           content_by_lua_file /data/matchvs.com/user/wc6/matchvs.user.getAvatar.lua;
 
     }
     location = /wc6/getUserInfoX{
           default_type 'text/plain';
           charset UTF-8;
           content_by_lua_file /data/matchvs.com/user/wc6/matchvs.user.getUserInfoX.lua;

     }

     location = /wc6/checkSign{
           default_type 'text/plain';
           charset UTF-8;
           content_by_lua_file /data/matchvs.com/user/wc6/matchvs.user.checkSign.lua;

     }
     location = /wc6/getUserTime{
           default_type 'text/plain';
           charset UTF-8;
           content_by_lua_file /data/matchvs.com/user/wc6/matchvs.user.getUserTime.lua;

     }


	location /wc6/getAvatarInfo {
	 proxy_pass   http://testupload.matchvs.com/wc6/getAvatarInfo;
	 proxy_set_header X-Real-IP $remote_addr;
	 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
   }





























 

    
    location /testA.do{
            resolver 180.76.76.76 119.29.29.29 114.215.126.16;
            default_type 'text/plain';
            if ($time_iso8601 ~ "^(\d{4})-(\d{2})-(\d{2})") {
                set $year $1;
                set $month $2;
                set $day $3;
            }
            error_log /var/log/nginx/testA.error.log;
            access_log /var/log/nginx/testA.$year.$month.$day.access.log;
            content_by_lua '
                local kolib = require "common.kolib"
                local json = require "common.json"
                local args = ngx.req.get_uri_args()
                local sha2 = require "sha2"
                local base64 = require "base64"

                local function fromhex(str)
                    return (str:gsub("..", function (cc)
                        return string.char(tonumber(cc, 16))
                    end))
                end

                ngx.say("ngx.var = ", ngx.var.query_string)

                for k,v in pairs(args) do
                    ngx.say("args[", k, "] = ", v)
                end

                local sha256Res = sha2.sha256hex("9e7479fafea11579677ed7a110f51c612015-09-10T06:02:04Z993bf2b492924267")
                local base64Res = base64.encode(fromhex(sha256Res)) 
		ngx.say("sha256 : ", sha256Res)
                ngx.say("base64 : ", base64Res)
                ngx.say("A.args.list = ", args["list"])
                ngx.say("A.args.list.type = ", type(args["list"]))
                local status, err = pcall(function() args["list"] = json:decode(kolib.urldecode(args["list"] or "[]")) end)
                if not status then
                    ngx.say("A.args.list parse json error : ", err)
                else
                    ngx.say("A.args.list.type = ", type(args["list"]))
                    ngx.say("A.args.list = ", kolib.table_dump(args["list"]))
                    if #args["list"] > 0 then
                        ngx.say("A.args.list.goods[1].id = ", args["list"][1].goodsID)
                    end
                end
                local status = args["status"] and (type(args["status"]) == "table" and args["status"] or {[1]=args["status"]}) or {}
                ngx.say("A.args.status.type = ", type(status))
                ngx.say("A.args.status.size = ", #status)
                ngx.say("A.args.status[1] = ", status[1])
                
                local res = ngx.location.capture("/testB.do", {
                    args = {
                        x={a = 1, b = "xxoo"},
                        y={a=2, b=3}
                    },
                    ctx = {
                        c = 2,
                        d = "fuck",
                        y={x= {a=2, b=3}, y = {a="suck", b="good"}}
	            }
                })
                
                ngx.say("A.uri = ", ngx.var.uri)
                ngx.say("A.ip = ", ngx.var.remote_addr)
                ngx.say("A.res = {")
		ngx.say(res.body)
                ngx.say("}")
                
                
                local ps = "[{\\"productID\\":101, \\"count\\":10, \\"gameID\\":100011},{\\"productID\\":102, \\"count\\":10, \\"gameID\\":101923}]"
                ps = json:decode(ps)
                ngx.say(kolib.table_dump(ps))
                ngx.exit(ngx.HTTP_OK)
	    ';
    }
    location /testB.do{
            resolver 180.76.76.76 119.29.29.29 114.215.126.16;
            default_type 'text/plain';
            content_by_lua '
                local json = require "common.json"
                local kolib = require "common.kolib"
		local conn = require "pay.connection"
                local http = require "resty.http"
                local mysql, err = conn.getMysql(nil, nil)
		local args = ngx.req.get_uri_args()
                ngx.say("    B.uri = ", ngx.var.uri)
                ngx.say("    B.ip = ", ngx.var.remote_addr)
                ngx.say("    B.args = ", json:encode(args))
                ngx.say("    B.ctx = ", json:encode(ngx.ctx))
                ngx.say("    sql injection = ", ngx.quote_sql_str("aa\' or 1=1"))
                
		local params = {}
                params["amount"]        =1000
                params["cache"]         =1444739696
                params["gameID"]        =100200
                params["openExtend"]    ="testExtend"
                params["openOrderID"]   ="123456_888"
                params["orderID"]       =144473939600289
                params["orderTime"]     ="2015-10-13 20:15:54"
                params["payTime"]       ="2015-10-13 20:18:54"
                params["payType"]       =1
                params["userID"]        =123
                ngx.say("    kolib.makeSig = ", kolib.makeSig(params, "KO_APP_KEY"))
                ngx.say("    kolib.makeSignCommon = ", kolib.makeSignCommon(params, "&", "KO_APP_KEY", "KO_APP_KEY"))
               
                local httpClient = http:new()
                local ok, code, headers, status, body  = httpClient:request {
                    url     = "http://pay.kalazhu.com.cn/justsing/recharge_vs.php",
                    timeout = 3000,
                    scheme  = "http",
                    method  = "POST",
                    headers = {["Content-Type"] = "application/x-www-form-urlencoded" },
                    body = "userID=211067&gameID=102683&openOrderID=5be897384109486bb00c3e18edeab12a&openExtend=eyJ1aWQiOiI5Mzk3MTEiLCJ6aWQiOjEsImRlc2MiOiJ2c3pvbmUiLCJpZCI6ImNvbS50cmFuc21lbnNpb24uanVzdHNpbmcueXVhbmJhbzEwMCJ9&orderID=145251395800009&orderTime=2016-01-11 20:05:58&amount=600&payTime=2016-01-11 20:05:58&payType=0&cache=1452513958&sign=4949fa6e0ef00fc4a131ac34e6dd0ddf"
                }
                ngx.say("    post.ok ", ok)
                ngx.say("    post.code ", code)
                ngx.say("    post.status ", status)
                ngx.say("    post.body ", body)
			
                ngx.exit(ngx.HTTP_OK)
            ';
    }


}
