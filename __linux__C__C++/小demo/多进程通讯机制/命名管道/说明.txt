1.
 有名管道FIFO
　　1. 使不相关的两个进程彼此通信：a. 通过路径名指出，在文件系统中可见　　
　　　　　　　　　　　　　　　　　 b. 管道建立后，两进程可按普通文件一样对其操作
　　2. FIFO遵循先进先出规则：a. 对管道读从开始处返回数据
　　　　　　　　　　　　　　  b. 对管道写则把数据添加到末尾
　　　　　　　　　　　　　　  c. 不支持如lseek()等文件定位操作


2.
#include <sys/types.h>
#include <sys/stat.h>
int mkfifo(const char*filename,mode_t mode)

创建管道成功后，可使用open()、read()和write()等函数。
　　为读而打开的管道可在open()中设置O_RDONLY
　　为写而打开的管道可在open()中设置O_WRONLY

3.
与普通文件不同的是阻塞问题
　　?普通文件的读写时不会出现阻塞问题
　　?在管道的读写中却有阻塞的可能，
　　?非阻塞标志：在open()函数中设定为O_NONBLOCK


4.
阻塞打开与非阻塞打开
对于读进程
　　?若该管道是阻塞打开，且当前FIFO内没有数据，则对读进程而言将一直阻塞到有数据写入		?若该管道是非阻塞打开，则不论FIFO内是否有数据，读进程都会立即执行读操作。即如果FIFO内没有数据，则读函数将立刻返回0

对于写进程
　　?若该管道是阻塞打开，则写操作将一直阻塞到数据可以被写入
　　?若该管道是非阻塞打开而不能写入全部数据，则读操作进行部分写入或者调用失败




./test 
echo "ddd" > /tmp/myfifo

./test1
echo "ddd" > in1
echo "ddd" > in1
echo "sss" > in2
echo "sss" > in2

./test2

