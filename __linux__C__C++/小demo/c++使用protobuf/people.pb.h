// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: people.proto

#ifndef PROTOBUF_people_2eproto__INCLUDED
#define PROTOBUF_people_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace demo {
class People;
class PeopleDefaultTypeInternal;
extern PeopleDefaultTypeInternal _People_default_instance_;
class workClass;
class workClassDefaultTypeInternal;
extern workClassDefaultTypeInternal _workClass_default_instance_;
}  // namespace demo

namespace demo {

namespace protobuf_people_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_people_2eproto

// ===================================================================

class workClass : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:demo.workClass) */ {
 public:
  workClass();
  virtual ~workClass();

  workClass(const workClass& from);

  inline workClass& operator=(const workClass& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const workClass& default_instance();

  static inline const workClass* internal_default_instance() {
    return reinterpret_cast<const workClass*>(
               &_workClass_default_instance_);
  }

  void Swap(workClass* other);

  // implements Message ----------------------------------------------

  inline workClass* New() const PROTOBUF_FINAL { return New(NULL); }

  workClass* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const workClass& from);
  void MergeFrom(const workClass& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(workClass* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:demo.workClass)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 id_;
  friend struct  protobuf_people_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class People : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:demo.People) */ {
 public:
  People();
  virtual ~People();

  People(const People& from);

  inline People& operator=(const People& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const People& default_instance();

  static inline const People* internal_default_instance() {
    return reinterpret_cast<const People*>(
               &_People_default_instance_);
  }

  void Swap(People* other);

  // implements Message ----------------------------------------------

  inline People* New() const PROTOBUF_FINAL { return New(NULL); }

  People* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const People& from);
  void MergeFrom(const People& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(People* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 renum = 5;
  int renum_size() const;
  void clear_renum();
  static const int kRenumFieldNumber = 5;
  ::google::protobuf::int32 renum(int index) const;
  void set_renum(int index, ::google::protobuf::int32 value);
  void add_renum(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      renum() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_renum();

  // repeated .demo.workClass work = 6;
  int work_size() const;
  void clear_work();
  static const int kWorkFieldNumber = 6;
  const ::demo::workClass& work(int index) const;
  ::demo::workClass* mutable_work(int index);
  ::demo::workClass* add_work();
  ::google::protobuf::RepeatedPtrField< ::demo::workClass >*
      mutable_work();
  const ::google::protobuf::RepeatedPtrField< ::demo::workClass >&
      work() const;

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string email = 3;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 3;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // required int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional int32 num = 4;
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 4;
  ::google::protobuf::int32 num() const;
  void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:demo.People)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_id();
  void clear_has_id();
  void set_has_email();
  void clear_has_email();
  void set_has_num();
  void clear_has_num();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > renum_;
  ::google::protobuf::RepeatedPtrField< ::demo::workClass > work_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 num_;
  friend struct  protobuf_people_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// workClass

// required int32 id = 1;
inline bool workClass::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void workClass::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void workClass::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void workClass::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 workClass::id() const {
  // @@protoc_insertion_point(field_get:demo.workClass.id)
  return id_;
}
inline void workClass::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:demo.workClass.id)
}

// required string name = 2;
inline bool workClass::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void workClass::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void workClass::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void workClass::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& workClass::name() const {
  // @@protoc_insertion_point(field_get:demo.workClass.name)
  return name_.GetNoArena();
}
inline void workClass::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:demo.workClass.name)
}
#if LANG_CXX11
inline void workClass::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.workClass.name)
}
#endif
inline void workClass::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.workClass.name)
}
inline void workClass::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.workClass.name)
}
inline ::std::string* workClass::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:demo.workClass.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* workClass::release_name() {
  // @@protoc_insertion_point(field_release:demo.workClass.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void workClass::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:demo.workClass.name)
}

// -------------------------------------------------------------------

// People

// required string name = 1;
inline bool People::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void People::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void People::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void People::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& People::name() const {
  // @@protoc_insertion_point(field_get:demo.People.name)
  return name_.GetNoArena();
}
inline void People::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:demo.People.name)
}
#if LANG_CXX11
inline void People::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.People.name)
}
#endif
inline void People::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.People.name)
}
inline void People::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.People.name)
}
inline ::std::string* People::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:demo.People.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* People::release_name() {
  // @@protoc_insertion_point(field_release:demo.People.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void People::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:demo.People.name)
}

// required int32 id = 2;
inline bool People::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void People::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void People::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void People::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 People::id() const {
  // @@protoc_insertion_point(field_get:demo.People.id)
  return id_;
}
inline void People::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:demo.People.id)
}

// required string email = 3;
inline bool People::has_email() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void People::set_has_email() {
  _has_bits_[0] |= 0x00000002u;
}
inline void People::clear_has_email() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void People::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
inline const ::std::string& People::email() const {
  // @@protoc_insertion_point(field_get:demo.People.email)
  return email_.GetNoArena();
}
inline void People::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:demo.People.email)
}
#if LANG_CXX11
inline void People::set_email(::std::string&& value) {
  set_has_email();
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.People.email)
}
#endif
inline void People::set_email(const char* value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.People.email)
}
inline void People::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.People.email)
}
inline ::std::string* People::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:demo.People.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* People::release_email() {
  // @@protoc_insertion_point(field_release:demo.People.email)
  clear_has_email();
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void People::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:demo.People.email)
}

// optional int32 num = 4;
inline bool People::has_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void People::set_has_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void People::clear_has_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void People::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 People::num() const {
  // @@protoc_insertion_point(field_get:demo.People.num)
  return num_;
}
inline void People::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:demo.People.num)
}

// repeated int32 renum = 5;
inline int People::renum_size() const {
  return renum_.size();
}
inline void People::clear_renum() {
  renum_.Clear();
}
inline ::google::protobuf::int32 People::renum(int index) const {
  // @@protoc_insertion_point(field_get:demo.People.renum)
  return renum_.Get(index);
}
inline void People::set_renum(int index, ::google::protobuf::int32 value) {
  renum_.Set(index, value);
  // @@protoc_insertion_point(field_set:demo.People.renum)
}
inline void People::add_renum(::google::protobuf::int32 value) {
  renum_.Add(value);
  // @@protoc_insertion_point(field_add:demo.People.renum)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
People::renum() const {
  // @@protoc_insertion_point(field_list:demo.People.renum)
  return renum_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
People::mutable_renum() {
  // @@protoc_insertion_point(field_mutable_list:demo.People.renum)
  return &renum_;
}

// repeated .demo.workClass work = 6;
inline int People::work_size() const {
  return work_.size();
}
inline void People::clear_work() {
  work_.Clear();
}
inline const ::demo::workClass& People::work(int index) const {
  // @@protoc_insertion_point(field_get:demo.People.work)
  return work_.Get(index);
}
inline ::demo::workClass* People::mutable_work(int index) {
  // @@protoc_insertion_point(field_mutable:demo.People.work)
  return work_.Mutable(index);
}
inline ::demo::workClass* People::add_work() {
  // @@protoc_insertion_point(field_add:demo.People.work)
  return work_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::demo::workClass >*
People::mutable_work() {
  // @@protoc_insertion_point(field_mutable_list:demo.People.work)
  return &work_;
}
inline const ::google::protobuf::RepeatedPtrField< ::demo::workClass >&
People::work() const {
  // @@protoc_insertion_point(field_list:demo.People.work)
  return work_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace demo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_people_2eproto__INCLUDED
