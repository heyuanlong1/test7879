信号处理的方法有三种：
	1.使用signal函数进行处理，
	2.使用sigaction函数进行处理，
	3.使用信号集函数。

处理信号：
	1.默认动作
	2.忽略
	3.捕捉

{
	the signal SIGKILL and SIGSTOP cannot be caught,blocked of ignored
	SIGKILL和SIGSTOP是不能被改变的

	ctrl+c SIGINT
	ctrl+z SIGTSTP
	ctrl+\ SIGQUIT
	段错误 11  SIGEGV  非法操作内存
	SIGPIPE 向一个没有读端的管道写数据，默认动作是终止进程
}

使用kill -9 PID 关闭
kill -SIGHUP PID
kill -SIGTERM PID
man 7 signal查看信号的一些说明


5.9 SIGCHLD信号处理
	5.9.1 SIGCHLD的产生条件
	子进程终止时
	子进程接收到SIGSTOP信号停止时
	子进程处在停止态，接受到SIGCONT后唤醒时

	所以可以接受到信号后waitpid
	void do_sig_child(int signo)
	{
		int status;
		pid_t pid;
		while ((pid = waitpid(0, &status, WNOHANG)) > 0) {
				if (WIFEXITED(status))
					printf("child %d exit %d\n", pid, WEXITSTATUS(status));
				else if (WIFSIGNALED(status))
					printf("child %d cancel signal %d\n", pid, WTERMSIG(status));
		}
	}



统一时间源
	信号写到管道里，主循环监听该管道。 libevent就是这样干的。看到代码5sig.cpp

多线程统一信号处理
	1.在主线程创建出其他子线程之前就调用pthread_sigmask来设置信号掩码，所有新创建的子线程都将自动继承这个信号掩码。
	2.在某个线程调用sigwait来等待信号并处理。使用了sigwait，就不应该再为信号设置信号处理函数了。
	int sigwait(const sigset_t* set,ing* sig)
	见6sig.cpp


大部分系统不对信号排队。

sigpending 函数:
int sigpending(sigset_t *set);
功能：返回在阻塞期间接收到阻塞信号的集合。


sigsuspend 函数：
int sigsuspend(const sigset_t *mask);
功能：
	sigsuspend()  temporarily  replaces  the  signal  mask of the calling process with the mask 
	given by mask and then suspends the process until delivery of a signal whose action  is  to
	invoke a signal handler or to terminate a process.

	If  the signal terminates the process, then sigsuspend() does not return.  If the signal is
	caught, then sigsuspend() returns after the signal handler returns, and the signal mask  is
	restored to the state before the call to sigsuspend().



